{
  admin localhost:2019

  log {
    output stdout
    level WARN
    format console
  }

  grace_period 3s
}

(reverseProxyConfig) {
  header_up +X_FORWARDED_PORT 443
  header_up +X_FORWARDED_PROTO https
  header_up X-Real-IP {remote_host}

  lb_policy least_conn
  lb_try_duration 2s
  lb_try_interval 150ms
  fail_duration 4s
  unhealthy_status 5xx
}

(logsConfig) {
  log {
    output stdout
    level WARN
    format console
  }
}

[[ range $domain, $serviceGroup := .wildcardServices ]]
[[ $domain ]] {
  import tlsConfig
  import logsConfig
  encode zstd gzip

  [[ range $serviceIndex, $service := $serviceGroup.Services ]]
  @wildcard_[[ $serviceIndex ]] host [[ range $index, $element := $service.SrvUrls ]][[ if $index ]] [[ end ]][[ $element ]][[ end ]]
  handle @wildcard_[[ $serviceIndex ]] {
    reverse_proxy {
      [[ $service.To ]] [[ $service.Upstream ]][[ if eq $service.To "dynamic srv" ]] {
        refresh 5s
        dial_timeout 1s
      }[[ end ]]
      import reverseProxyConfig
      transport http {
        versions 2
        read_buffer 32KiB
        write_buffer 32KiB
        [[ if $service.UseHttps ]]
        tls
        [[ if $service.SkipTlsVerify ]]tls_insecure_skip_verify[[ end ]]
        [[ end ]]
      }
    }
  }
  [[ end ]]

  handle {
    [[ if not $serviceGroup.Upstream ]]
    abort
    [[ else ]]
    reverse_proxy {
      [[ $serviceGroup.To ]] [[ $serviceGroup.Upstream ]][[ if eq $serviceGroup.To "dynamic srv" ]] {
        refresh 5s
        dial_timeout 1s
      }[[ end ]]
      import reverseProxyConfig
      transport http {
        versions 2
        read_buffer 32KiB
        write_buffer 32KiB
        [[ if $serviceGroup.UseHttps ]]
        tls
        [[ if $serviceGroup.SkipTlsVerify ]]tls_insecure_skip_verify[[ end ]]
        [[ end ]]
      }
		}
    [[ end ]]
  }
}
[[ end ]]

[[ range $service := .services ]]
[[ range $index, $element := $service.SrvUrls ]][[ if $index ]] [[ end ]][[ $element ]][[ end ]] {
  import logsConfig
  encode zstd gzip

  reverse_proxy {
    [[ $service.To ]] [[ $service.Upstream ]][[ if eq $service.To "dynamic srv" ]] {
      refresh 5s
      dial_timeout 1s
    }[[ end ]]
    import reverseProxyConfig
    transport http {
      versions 2
      read_buffer 32KiB
      write_buffer 32KiB
      [[ if $service.UseHttps ]]
      tls
      [[ if $service.SkipTlsVerify ]]tls_insecure_skip_verify[[ end ]]
      [[ end ]]
    }
  }
}
[[ end ]]
